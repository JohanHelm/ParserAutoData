from pathlib import Path
from os import chdir
from subprocess import PIPE, Popen
from loguru import logger

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from settings import TOKEN, DEVELOPER_ID, OWNER_ID, CONTROL_CHAT_ID, WORKDIR
from app import MainAppManager


bot = Bot(token=TOKEN)
dp = Dispatcher()


launch_btn = InlineKeyboardButton(text="–ü—É—Å–∫!", callback_data="launch_the_app")
update_btn = InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å!", callback_data="try_to_update")
keyboard = InlineKeyboardMarkup(inline_keyboard=[[launch_btn], [update_btn]])
destroy_btn = InlineKeyboardButton(text="–ê–Ω–Ω–∏–≥–∏–ª–∏—Ä–æ–≤–∞—Ç—å!", callback_data="launch_the_annihilation")
keyboard_2 = InlineKeyboardMarkup(inline_keyboard=[[launch_btn], [update_btn], [destroy_btn]])

async def process_start_command(message: Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ï–≤–≥–µ–Ω–∏–π!!\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ü—É—Å–∫!",
                             reply_markup=keyboard)
        await bot.send_message(CONTROL_CHAT_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"{message.from_user.id} have started bot")
    elif message.from_user.id == DEVELOPER_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä!!",
                             reply_markup=keyboard_2)
    else:
        await message.answer("–¢—ã –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º!\n–í—Å–µ–≥–æ —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ, –¥—Ä—É–∂–∏—â–µ!!")
        logger.warning(f"Some guy with {message.from_user.id} tryed to use this bot")


async def process_help_command(message: Message):
    await message.answer(
        "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚ñ∂Ô∏è–ü—É—Å–∫!\n\n"
        "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üîº–û–±–Ω–æ–≤–∏—Ç—å!\n\n"
        "–ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ —Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–∏—Ä—Ç—É–∞–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")


async def process_launch_app(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—Å—è, –∂–¥–∏—Ç–µ!!\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    main_app_manager = MainAppManager(start_passenger_drom=False, start_freight_drom=False, start_dvorniki=True)
    main_app_manager.start_main_app()
    await callback.message.edit_text(text='–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!! –î–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—É—Å–∫!',
                                     reply_markup=callback.message.reply_markup)


async def check_for_updates(callback: CallbackQuery):
    current_directory = Path.cwd()
    chdir(WORKDIR)
    cmd = f'git pull origin main '
    update_request = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True, universal_newlines=True)
    update_result = update_request.communicate()[0]
    if 'Already up to date.\n' in update_result:
        chdir(current_directory)
        await callback.message.edit_text(text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                                         reply_markup=callback.message.reply_markup)
    else:
        await callback.message.edit_text(text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –°–µ–π—á–∞—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.\n"
                                              "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")





dp.message.register(process_start_command, Command(commands="start"))
dp.message.register(process_help_command, Command(commands="help"))
dp.callback_query.register(process_launch_app, F.data == "launch_the_app")
dp.callback_query.register(check_for_updates, F.data == "try_to_update")



async def start_bot():
    logger.info(f"{bot} is on polling")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)





